{"version":3,"sources":["../../lib/operations/linetv-search-operation.js"],"names":["LINETvSearchOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","typeLabel","validateNonZero","countPerPage","validateCountryCode","countryCode","length","validateNotEmpty","query","run","options","validateConfig","prompts","require","channelId","config","channel","id","page","type","message","prompt","validate","cancelOption","initial","response","request","send","data","body","clips","console","log","warn","format","JSON","stringify","queryResult","map","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","table","hasMore","nextPage","active","inactive","error","logAxiosError","info","LINETvSearchRequest","accessToken"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEe,MAAMA,qBAAN,SAAoCC,kBAApC,CAA8C;AAK3C,aAALC,KAAK,GAAG;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,6BAA6BC,IADvC;AAEEC,MAAAA,OAAO,EACJ,wCAAD,GACAC,OADA,GAEAA,OAFA,GAGC,eAAD,CAAgBC,IAHhB,GAIAD,OAJA,GAKAA,OALA,GAMC,6EAND,GAOAA,OAPA,GAQAA,OARA,GASC,6BAAD,CAA8BC,IAT9B,GAUAD,OAVA,GAWAA,OAXA,GAYC,qFAZD,GAaAA,OAbA,GAcAA,OAdA,GAeC,+BAAD,CAAgCC;AAlBpC,KADe,EAqBf;AACEJ,MAAAA,MAAM,EAAE,SADV;AAEEK,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,IAAI,EAAE,SAASF,IADjB;AAEEG,QAAAA,WAAW,EAAE;AAFf,OADU,EAKV;AACED,QAAAA,IAAI,EAAE,OAAOF,IADf;AAEEI,QAAAA,SAAS,EAAE,oBAFb;AAGED,QAAAA,WAAW,EAAE;AAHf,OALU;AAFd,KArBe,CAAjB;AAqCA,WAAOR,QAAP;AACD;;AAEqB,SAAfU,eAAe,CAACC,YAAD,EAAe;AACnC,WAAOA,YAAY,KAAK,CAAjB,GAAqB,qBAArB,GAA6C,IAApD;AACD;;AAEyB,SAAnBC,mBAAmB,CAACC,WAAD,EAAc;AACtC,WAAOA,WAAW,CAACC,MAAZ,KAAuB,CAAvB,GACH,wCADG,GAEH,IAFJ;AAGD;;AAEsB,SAAhBC,gBAAgB,CAACC,KAAD,EAAQ;AAC7B,WAAO,CAACA,KAAD,GAAS,oBAAT,GAAgC,IAAvC;AACD;;AAEe,eAAHC,GAAG,CAACC,OAAD,EAAU;AACxB,QAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,UAAMC,SAAS,GAAG,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,EAAtC;AACA,QAAIC,IAAI,GAAGR,OAAO,CAACQ,IAAR,IAAgB,CAA3B;AAEA,UAAM;AAAEb,MAAAA;AAAF,QAAkB,MAAMO,OAAO,CACnC;AACEO,MAAAA,IAAI,EAAE,MADR;AAEEpB,MAAAA,IAAI,EAAE,aAFR;AAGEqB,MAAAA,OAAO,EAAG,gBAAe,aAAaC,MAAO,EAH/C;AAIEC,MAAAA,QAAQ,EAAE,KAAKlB;AAJjB,KADmC,EAOnC,KAAKmB,YAP8B,CAArC;AASA,UAAM;AAAEf,MAAAA;AAAF,QAAY,MAAMI,OAAO,CAC7B;AACEO,MAAAA,IAAI,EAAE,MADR;AAEEpB,MAAAA,IAAI,EAAE,OAFR;AAGEqB,MAAAA,OAAO,EAAG,SAHZ;AAIEE,MAAAA,QAAQ,EAAE,KAAKf;AAJjB,KAD6B,EAO7B,KAAKgB,YAPwB,CAA/B;AASA,UAAM;AAAEpB,MAAAA;AAAF,QAAmB,MAAMS,OAAO,CACpC;AACEO,MAAAA,IAAI,EAAE,QADR;AAEEpB,MAAAA,IAAI,EAAE,cAFR;AAGEqB,MAAAA,OAAO,EAAE,6BAHX;AAIEI,MAAAA,OAAO,EAAE,EAJX;AAKEF,MAAAA,QAAQ,EAAE,KAAKpB;AALjB,KADoC,EAQpC,KAAKqB,YAR+B,CAAtC;AAWA;;AACA,QAAIE,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,IAAb,CACnBb,SADmB,EAEnBT,WAFmB,EAGnBG,KAHmB,EAInBU,IAJmB,EAKnBf,YALmB,CAArB;;AAOA,QACE,CAACsB,QAAQ,CAACG,IAAV,IACAH,QAAQ,CAACG,IAAT,CAAcC,IAAd,KAAuB,IADvB,IAEAJ,QAAQ,CAACG,IAAT,CAAcC,IAAd,CAAmBC,KAAnB,KAA6B,IAH/B,EAIE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBC,IAA9B;AACA,aAAO,IAAP;AACD;;AAED,QAAIvB,OAAO,CAACwB,MAAR,KAAmB,MAAvB,EAA+B;AAC7BH,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACC,SAAL,CAAeX,QAAQ,CAACG,IAAxB,EAA8B,IAA9B,EAAoC,CAApC,CAAZ;AACA,aAAO,IAAP;AACD;;AAED,UAAMS,WAAW,GAAGZ,QAAQ,CAACG,IAAT,CAAcC,IAAd,CAAmBC,KAAnB,CAAyBQ,GAAzB,CAA6BC,IAAI,IAAI;AACvD,YAAMC,YAAY,GAAG,EAArB;AACAA,MAAAA,YAAY,CAAC,cAAcC,OAAf,CAAZ,GAAsCF,IAAI,CAACG,MAA3C;AACAF,MAAAA,YAAY,CAAC,QAAQC,OAAT,CAAZ,GAAgCF,IAAI,CAACI,SAArC;AACAH,MAAAA,YAAY,CAAC,aAAaC,OAAd,CAAZ,GAAqCF,IAAI,CAACK,SAA1C;AACAJ,MAAAA,YAAY,CAAC,aAAaC,OAAd,CAAZ,GAAqCF,IAAI,CAACM,WAA1C;AACA,aAAOL,YAAP;AACD,KAPmB,CAApB;AASAT,IAAAA,OAAO,CAACe,KAAR,CAAcT,WAAd;;AAEA,WAAOZ,QAAQ,CAACG,IAAT,CAAcC,IAAd,CAAmBkB,OAA1B,EAAmC;AACjC,YAAM;AAAEC,QAAAA;AAAF,UAAe,MAAMpC,OAAO,CAChC;AACEO,QAAAA,IAAI,EAAE,QADR;AAEEpB,QAAAA,IAAI,EAAE,UAFR;AAGEqB,QAAAA,OAAO,EAAG,iBAAgBF,IAAK,qBAHjC;AAIEM,QAAAA,OAAO,EAAE,IAJX;AAKEyB,QAAAA,MAAM,EAAE,KALV;AAMEC,QAAAA,QAAQ,EAAE;AANZ,OADgC,EAShC,KAAK3B,YAT2B,CAAlC;;AAWA,UAAIyB,QAAJ,EAAc;AACZ9B,QAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;;AACA,YAAI;AACFO,UAAAA,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,IAAb,CACfb,SADe,EAEfT,WAFe,EAGfG,KAHe,EAIfU,IAJe,EAKff,YALe,CAAjB;AAOD,SARD,CAQE,OAAOgD,KAAP,EAAc;AACd,eAAKC,aAAL,CAAmBD,KAAnB;AACA,iBAAO,KAAP;AACD;;AAEDpB,QAAAA,OAAO,CAACe,KAAR,CACErB,QAAQ,CAACG,IAAT,CAAcC,IAAd,CAAmBC,KAAnB,CAAyBQ,GAAzB,CAA6BC,IAAI,IAAI;AACnC,gBAAMC,YAAY,GAAG,EAArB;AACAA,UAAAA,YAAY,CAAC,cAAcC,OAAf,CAAZ,GAAsCF,IAAI,CAACG,MAA3C;AACAF,UAAAA,YAAY,CAAC,QAAQC,OAAT,CAAZ,GAAgCF,IAAI,CAACI,SAArC;AACAH,UAAAA,YAAY,CAAC,aAAaC,OAAd,CAAZ,GAAqCF,IAAI,CAACK,SAA1C;AACAJ,UAAAA,YAAY,CAAC,aAAaC,OAAd,CAAZ,GAAqCF,IAAI,CAACM,WAA1C;AACA,iBAAOL,YAAP;AACD,SAPD,CADF;AAUD,OAzBD,MAyBO;AACL,eAAO,IAAP;AACD;AACF;;AACDT,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeqB,IAA3B;AACA,WAAO,IAAP;AACD;;AA/K0D;;;;gBAAxChE,qB,aACF,IAAIiE,4BAAJ,CAAwB;AACvCC,EAAAA,WAAW,EAFMlE,qBAEJ,CAAK0B,MAAL,CAAYC,OAAZ,CAAoBuC;AADM,CAAxB,C","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport { EOL } from 'os';\nimport Operation from './operation';\nimport LINETvSearchRequest from '../apis/linetv-search-request';\n\nexport default class LINETvSearchOperation extends Operation {\n  static request = new LINETvSearchRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets a clip search result.'.help,\n        content:\n          `To display clip search result in table` +\n          EOL +\n          EOL +\n          `linetv search`.code +\n          EOL +\n          EOL +\n          `To get clip search result in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv search --format json`.code +\n          EOL +\n          EOL +\n          `To get clip search result start from selected page, you can run with --page option.` +\n          EOL +\n          EOL +\n          `linetv search --page <number>`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To display data in JSON format'\n          },\n          {\n            name: 'page'.code,\n            typeLabel: '{underline number}',\n            description: 'To display data starts from selected page'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateNonZero(countPerPage) {\n    return countPerPage === 0 ? 'Zero is not allowed' : true;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static validateNotEmpty(query) {\n    return !query ? 'Query cannot empty' : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n    let page = options.page || 1;\n\n    const { countryCode } = await prompts(\n      {\n        type: 'text',\n        name: 'countryCode',\n        message: `Country Code ${'ISO 3166-2'.prompt}`,\n        validate: this.validateCountryCode\n      },\n      this.cancelOption\n    );\n    const { query } = await prompts(\n      {\n        type: 'text',\n        name: 'query',\n        message: `Query :`,\n        validate: this.validateNotEmpty\n      },\n      this.cancelOption\n    );\n    const { countPerPage } = await prompts(\n      {\n        type: 'number',\n        name: 'countPerPage',\n        message: 'Number of display per page?',\n        initial: 10,\n        validate: this.validateNonZero\n      },\n      this.cancelOption\n    );\n\n    /** @type {import('axios').AxiosResponse<LINETvSearchResponseData>} */\n    let response = await this.request.send(\n      channelId,\n      countryCode,\n      query,\n      page,\n      countPerPage\n    );\n    if (\n      !response.data ||\n      response.data.body === null ||\n      response.data.body.clips === null\n    ) {\n      console.log('No query result'.warn);\n      return true;\n    }\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(response.data, null, 2));\n      return true;\n    }\n\n    const queryResult = response.data.body.clips.map(item => {\n      const columnHeader = {};\n      columnHeader['Clip Number'.success] = item.clipNo;\n      columnHeader['Title'.success] = item.clipTitle;\n      columnHeader['Play Count'.success] = item.playCount;\n      columnHeader['Like Point'.success] = item.likeitPoint;\n      return columnHeader;\n    });\n\n    console.table(queryResult);\n\n    while (response.data.body.hasMore) {\n      const { nextPage } = await prompts(\n        {\n          type: 'toggle',\n          name: 'nextPage',\n          message: `Current page: ${page}. Go to next page ?`,\n          initial: true,\n          active: 'yes',\n          inactive: 'no'\n        },\n        this.cancelOption\n      );\n      if (nextPage) {\n        page = page + 1;\n        try {\n          response = await this.request.send(\n            channelId,\n            countryCode,\n            query,\n            page,\n            countPerPage\n          );\n        } catch (error) {\n          this.logAxiosError(error);\n          return false;\n        }\n\n        console.table(\n          response.data.body.clips.map(item => {\n            const columnHeader = {};\n            columnHeader['Clip Number'.success] = item.clipNo;\n            columnHeader['Title'.success] = item.clipTitle;\n            columnHeader['Play Count'.success] = item.playCount;\n            columnHeader['Like Point'.success] = item.likeitPoint;\n            return columnHeader;\n          })\n        );\n      } else {\n        return true;\n      }\n    }\n    console.log('No more page'.info);\n    return true;\n  }\n}\n"],"file":"linetv-search-operation.js"}