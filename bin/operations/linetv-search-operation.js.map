{"version":3,"sources":["../../lib/operations/linetv-search-operation.js"],"names":["LINETvSearchOperation","Operation","usage","sections","header","help","content","code","validateNonZero","countPerPage","validateCountryCode","countryCode","length","validateNotEmpty","query","run","validateConfig","prompts","require","channelId","config","channel","id","page","type","name","message","prompt","validate","cancelOption","initial","response","request","send","data","body","clips","console","log","warn","queryResult","map","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","table","hasMore","nextPage","active","inactive","error","logAxiosError","info","LINETvSearchRequest","accessToken"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport Operation from './operation';\nimport LINETvSearchRequest from '../apis/linetv-search-request';\n\nexport default class LINETvSearchOperation extends Operation {\n  static request = new LINETvSearchRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets a clip search result.'.help,\n        content: `linetv search`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateNonZero(countPerPage) {\n    return countPerPage === 0 ? 'Zero is not allowed' : true;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static validateNotEmpty(query) {\n    return !query ? 'Query cannot empty' : true;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n    let page = 1;\n\n    const { countryCode } = await prompts(\n      {\n        type: 'text',\n        name: 'countryCode',\n        message: `Country Code ${'ISO 3166-2'.prompt}`,\n        validate: this.validateCountryCode\n      },\n      this.cancelOption\n    );\n    const { query } = await prompts(\n      {\n        type: 'text',\n        name: 'query',\n        message: `Query :`,\n        validate: this.validateNotEmpty\n      },\n      this.cancelOption\n    );\n    const { countPerPage } = await prompts(\n      {\n        type: 'number',\n        name: 'countPerPage',\n        message: 'Number of display per page?',\n        initial: 10,\n        validate: this.validateNonZero\n      },\n      this.cancelOption\n    );\n\n    /** @type {import('axios').AxiosResponse<LINETvSearchResponseData>} */\n    let response = await this.request.send(\n      channelId,\n      countryCode,\n      query,\n      page,\n      countPerPage\n    );\n    if (\n      !response.data ||\n      response.data.body === null ||\n      response.data.body.clips === null\n    ) {\n      console.log('No query result'.warn);\n      return true;\n    }\n\n    const queryResult = response.data.body.clips.map(item => {\n      const columnHeader = {};\n      columnHeader['Clip Number'.success] = item.clipNo;\n      columnHeader['Title'.success] = item.clipTitle;\n      columnHeader['Play Count'.success] = item.playCount;\n      columnHeader['Like Point'.success] = item.likeitPoint;\n      return columnHeader;\n    });\n\n    console.table(queryResult);\n\n    while (response.data.body.hasMore) {\n      const { nextPage } = await prompts(\n        {\n          type: 'toggle',\n          name: 'nextPage',\n          message: 'Next Page ?',\n          initial: true,\n          active: 'yes',\n          inactive: 'no'\n        },\n        this.cancelOption\n      );\n      if (nextPage) {\n        page = page + 1;\n        try {\n          response = await this.request.send(\n            channelId,\n            countryCode,\n            query,\n            page,\n            countPerPage\n          );\n        } catch (error) {\n          this.logAxiosError(error);\n          return false;\n        }\n\n        console.table(\n          response.data.body.clips.map(item => {\n            const columnHeader = {};\n            columnHeader['Clip Number'.success] = item.clipNo;\n            columnHeader['Title'.success] = item.clipTitle;\n            columnHeader['Play Count'.success] = item.playCount;\n            columnHeader['Like Point'.success] = item.likeitPoint;\n            return columnHeader;\n          })\n        );\n      } else {\n        return true;\n      }\n    }\n    console.log('No more page'.info);\n    return true;\n  }\n}\n"],"file":"linetv-search-operation.js"}