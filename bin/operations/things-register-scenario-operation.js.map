{"version":3,"sources":["../../lib/operations/things-register-scenario-operation.js"],"names":["ThingsRegisterScenarioOperation","ThingsOperation","usage","sections","header","help","content","code","run","validateConfig","prompts","require","productId","type","name","message","cancelOption","dataFilePath","validate","validateFileExists","path","isAbsolute","resolve","response","request","send","logAxiosResponse","error","logAxiosError","ThingsUpdateProductScenarioSetRequest","accessToken","config","channel"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;AAEe,MAAMA,+BAAN,SAA8CC,wBAA9C,CAA8D;AAK3E,aAAWC,KAAX,GAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,yFACLC,IAFL;AAGEC,MAAAA,OAAO,EAAG,2BAAD,CAA4BC;AAHvC,KADe,CAAjB;AAQA,WAAOJ,QAAP;AACD;;AAED,eAAaK,GAAb,GAAmB;AACjB,QAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAgB,MAAMF,OAAO,CACjC;AACEG,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KADiC,EAMjC,KAAKC,YAN4B,CAAnC;;AASA,QAAI,CAACJ,SAAL,EAAgB;AACd,aAAO,KAAP;AACD;AAED;;;AACA,QAAI;AAAEK,MAAAA;AAAF,QAAmB,MAAMP,OAAO,CAClC;AACEG,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,OAAO,EAAE,sBAHX;AAIEG,MAAAA,QAAQ,EAAE,KAAKC;AAJjB,KADkC,EAOlC,KAAKH,YAP6B,CAApC;;AAUA,QAAI,CAACC,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AAED,QAAI,CAACG,cAAKC,UAAL,CAAgBJ,YAAhB,CAAL,EAAoC;AAClCA,MAAAA,YAAY,GAAGG,cAAKE,OAAL,CAAa,IAAb,EAAmBL,YAAnB,CAAf;AACD;;AAED,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,IAAb,CACrBb,SADqB,EAErBD,OAAO,CAACM,YAAD,CAFc,CAAvB;AAKA,WAAKS,gBAAL,CAAsBH,QAAtB;AACD,KAPD,CAOE,OAAOI,KAAP,EAAc;AACd,WAAKC,aAAL,CAAmBD,KAAnB;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAtE0E;;;;gBAAxD3B,+B,aACF,IAAI6B,8CAAJ,CAA0C;AACzDC,EAAAA,WAAW,EAFM9B,+BAEJ,CAAK+B,MAAL,CAAYC,OAAZ,CAAoBF;AADwB,CAA1C,C","sourcesContent":["import 'console.table';\nimport { Section } from 'command-line-usage';\nimport path from 'path';\n\nimport ThingsOperation from './things-operation';\n\nimport ThingsUpdateProductScenarioSetRequest from '../apis/things-update-product-scenario-set-request';\n\nexport default class ThingsRegisterScenarioOperation extends ThingsOperation {\n  static request = new ThingsUpdateProductScenarioSetRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Register (create or update) a scenario set for automatic communication under a product'\n          .help,\n        content: `things register:scenarios`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n\n    const { productId } = await prompts(\n      {\n        type: 'text',\n        name: 'productId',\n        message: 'Product ID?'\n      },\n      this.cancelOption\n    );\n\n    if (!productId) {\n      return false;\n    }\n\n    /** @type {{ dataFilePath:string }} */\n    let { dataFilePath } = await prompts(\n      {\n        type: 'text',\n        name: 'dataFilePath',\n        message: 'Input data file path',\n        validate: this.validateFileExists\n      },\n      this.cancelOption\n    );\n\n    if (!dataFilePath) {\n      return false;\n    }\n\n    if (!path.isAbsolute(dataFilePath)) {\n      dataFilePath = path.resolve('./', dataFilePath);\n    }\n\n    try {\n      const response = await this.request.send(\n        productId,\n        require(dataFilePath)\n      );\n\n      this.logAxiosResponse(response);\n    } catch (error) {\n      this.logAxiosError(error);\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"file":"things-register-scenario-operation.js"}