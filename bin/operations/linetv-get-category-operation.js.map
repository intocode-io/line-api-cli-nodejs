{"version":3,"sources":["../../lib/operations/linetv-get-category-operation.js"],"names":["LINETvGetCategoryOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","typeLabel","validateNonZero","countPerPage","validateCountryCode","countryCode","length","run","options","validateConfig","prompts","require","channelId","config","channel","id","type","message","prompt","validate","cancelOption","categories","listResponse","listRequest","send","data","body","console","log","warn","tabs","map","menu","title","categoryCode","categoryName","value","error","page","selectedCategory","choices","initial","getResponse","getRequest","format","JSON","stringify","clip","representClip","success","clipNo","clipTitle","serviceUrl","playCount","likeitPoint","table","channels","item","columnHeader","channelName","badgeType","hasMore","nextPage","active","inactive","logAxiosError","info","LINETvListCategoryRequest","accessToken","LINETvGetCategoryRequest"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport Operation from './operation';\nimport { EOL } from 'os';\nimport LINETvListCategoryRequest from '../apis/linetv-list-catagory-request';\nimport LINETvGetCategoryRequest from '../apis/linetv-get-category-request';\n\nexport default class LINETvGetCategoryOperation extends Operation {\n  static listRequest = new LINETvListCategoryRequest({\n    accessToken: this.config.channel.accessToken\n  });\n  static getRequest = new LINETvGetCategoryRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets category home data.'.help,\n        content:\n          `To display category home data in table` +\n          EOL +\n          EOL +\n          `linetv get:category`.code +\n          EOL +\n          EOL +\n          `To get category home data in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv get:category --format json`.code +\n          EOL +\n          EOL +\n          `To get category home data start from selected page, you can run with --page option.` +\n          EOL +\n          EOL +\n          `linetv get:category --page <number>`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To display data in JSON format'\n          },\n          {\n            name: 'page'.code,\n            typeLabel: '{underline number}',\n            description: 'To display data starts from selected page'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateNonZero(countPerPage) {\n    return countPerPage === 0 ? 'Zero is not allowed' : true;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n\n    const { countryCode } =\n      (await prompts(\n        {\n          type: 'text',\n          name: 'countryCode',\n          message: `Country Code ${'ISO 3166-2'.prompt}`,\n          validate: this.validateCountryCode\n        },\n        this.cancelOption\n      )) || {};\n\n    let categories = [];\n\n    try {\n      const listResponse = await this.listRequest.send(channelId, countryCode);\n\n      if (!listResponse.data || listResponse.data.body === null) {\n        console.log('Category list not found'.warn);\n        return true;\n      }\n\n      categories = listResponse.data.body.tabs\n        ? listResponse.data.body.tabs.map(menu => {\n            return {\n              title: menu.categoryCode,\n              description: menu.categoryName,\n              value: menu\n            };\n          })\n        : [];\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n\n    if (!categories.length) {\n      console.log('No category'.warn);\n      return true;\n    }\n\n    let page = options.page || 1;\n    const { selectedCategory } = await prompts(\n      {\n        type: 'select',\n        name: 'selectedCategory',\n        message: 'Select a category',\n        choices: categories\n      },\n      this.cancelOption\n    );\n\n    const { countPerPage } = await prompts(\n      {\n        type: 'number',\n        name: 'countPerPage',\n        message: 'Number of display per page?',\n        initial: 10,\n        validate: this.validateNonZero\n      },\n      this.cancelOption\n    );\n\n    let getResponse = await this.getRequest.send(\n      channelId,\n      countryCode,\n      selectedCategory.categoryCode,\n      page,\n      countPerPage\n    );\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(getResponse.data, null, 2));\n      return true;\n    }\n\n    if (page === 1) {\n      const clip = getResponse.data.body.representClip;\n      const representClip = [\n        { ' ': 'Represent Clip No.'.success, '  ': clip.clipNo },\n        { ' ': 'Represent Clip Title.'.success, '  ': clip.clipTitle },\n        { ' ': 'Represent Clip URL'.success, '  ': clip.serviceUrl },\n        { ' ': 'Play Count'.success, '  ': clip.playCount },\n        { ' ': 'Likeit Count'.success, '  ': clip.likeitPoint }\n      ];\n      console.table(representClip);\n    }\n    console.table(\n      getResponse.data.body.channels.map(item => {\n        const columnHeader = {};\n        columnHeader['Channel ID'.success] = item.channelId;\n        columnHeader['Channel Name'.success] = item.channelName;\n        columnHeader['Badge'.success] = item.badgeType;\n        columnHeader['URL'.success] = item.serviceUrl;\n        return columnHeader;\n      })\n    );\n\n    while (getResponse.data.body.hasMore) {\n      const { nextPage } = await prompts(\n        {\n          type: 'toggle',\n          name: 'nextPage',\n          message: `Current page: ${page}. Go to next page ?`,\n          initial: true,\n          active: 'yes',\n          inactive: 'no'\n        },\n        this.cancelOption\n      );\n      if (nextPage) {\n        page = page + 1;\n        try {\n          getResponse = await this.getRequest.send(\n            channelId,\n            countryCode,\n            selectedCategory.categoryCode,\n            page,\n            countPerPage\n          );\n        } catch (error) {\n          this.logAxiosError(error);\n          return false;\n        }\n        console.table(\n          getResponse.data.body.channels.map(item => {\n            const columnHeader = {};\n            columnHeader['Channel ID'.success] = item.channelId;\n            columnHeader['Channel Name'.success] = item.channelName;\n            columnHeader['Badge'.success] = item.badgeType;\n            columnHeader['URL'.success] = item.serviceUrl;\n            return columnHeader;\n          })\n        );\n      } else {\n        return true;\n      }\n    }\n    console.log('No more page'.info);\n    return true;\n  }\n}\n"],"file":"linetv-get-category-operation.js"}