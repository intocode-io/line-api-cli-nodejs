{"version":3,"sources":["../../lib/operations/line-init-operation.js"],"names":["LINEInitOperation","Operation","usage","sections","header","help","content","EOL","code","configFileName","run","prompts","require","exists","fs","existsSync","console","log","warn","overwrite","type","name","message","initial","active","inactive","id","hint","secret","hasLongLivedAccessToken","accessToken","rsToken","config","channel","writeFileSync","yaml","safeDump","info"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,iBAAN,SAAgCC,kBAAhC,CAA0C;AACvD,aAAWC,KAAX,GAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,kDAAkDC,IAD5D;AAEEC,MAAAA,OAAO,EACL,kCACAC,OADA,GAEAA,OAFA,GAGA,YAAYC,IAHZ,GAIAD,OAJA,GAKAA,OALA,GAMC,yGAAwG,KAAKE,cAAe;AATjI,KADe,CAAjB;AAcA,WAAON,QAAP;AACD;;AAED,eAAaO,GAAb,GAAmB;AACjB,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,UAAMC,MAAM,GAAGC,YAAGC,UAAH,CAAe,KAAIf,iBAAiB,CAACS,cAAe,EAApD,CAAf;;AAEA,QAAII,MAAM,KAAK,IAAf,EAAqB;AACnBG,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEjB,iBAAiB,CAACS,cAAe,iBAApC,CAAqDS,IAAjE;AAEA,YAAM;AAAEC,QAAAA;AAAF,UAAgB,MAAMR,OAAO,CAAC;AAClCS,QAAAA,IAAI,EAAE,QAD4B;AAElCC,QAAAA,IAAI,EAAE,WAF4B;AAGlCC,QAAAA,OAAO,EAAE,2BAHyB;AAIlCC,QAAAA,OAAO,EAAE,KAJyB;AAKlCC,QAAAA,MAAM,EAAE,KAL0B;AAMlCC,QAAAA,QAAQ,EAAE;AANwB,OAAD,CAAnC;;AASA,UAAI,CAACN,SAAL,EAAgB;AACd,eAAO,KAAP;AACD;AACF;;AAEDH,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCZ,IAA5C;AAEA,UAAM;AAAEqB,MAAAA;AAAF,QAAS,MAAMf,OAAO,CAAC;AAC3BS,MAAAA,IAAI,EAAE,QADqB;AAE3BC,MAAAA,IAAI,EAAE,IAFqB;AAG3BC,MAAAA,OAAO,EAAE,aAHkB;AAI3BK,MAAAA,IAAI,EACF;AALyB,KAAD,CAA5B;AAOA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMjB,OAAO,CAAC;AAC/BS,MAAAA,IAAI,EAAE,MADyB;AAE/BC,MAAAA,IAAI,EAAE,QAFyB;AAG/BC,MAAAA,OAAO,EAAE;AAHsB,KAAD,CAAhC;AAMA,UAAM;AAAEO,MAAAA;AAAF,QAA8B,MAAMlB,OAAO,CAAC;AAChDS,MAAAA,IAAI,EAAE,QAD0C;AAEhDC,MAAAA,IAAI,EAAE,yBAF0C;AAGhDC,MAAAA,OAAO,EAAE,sCAHuC;AAIhDC,MAAAA,OAAO,EAAE,KAJuC;AAKhDC,MAAAA,MAAM,EAAE,KALwC;AAMhDC,MAAAA,QAAQ,EAAE;AANsC,KAAD,CAAjD;AASA,QAAIK,WAAW,GAAG,EAAlB;;AAEA,QAAID,uBAAJ,EAA6B;AAC3B,YAAME,OAAO,GAAG,MAAMpB,OAAO,CAAC;AAC5BS,QAAAA,IAAI,EAAE,MADsB;AAE5BC,QAAAA,IAAI,EAAE,aAFsB;AAG5BC,QAAAA,OAAO,EAAE;AAHmB,OAAD,CAA7B;AAKAQ,MAAAA,WAAW,GAAGC,OAAO,CAACD,WAAtB;AACD;;AAED,UAAME,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AAAEP,QAAAA,EAAF;AAAME,QAAAA,MAAN;AAAcE,QAAAA;AAAd;AADI,KAAf;;AAIAhB,gBAAGoB,aAAH,CACG,KAAIlC,iBAAiB,CAACS,cAAe,EADxC,EAEE0B,gBAAKC,QAAL,CAAcJ,MAAd,CAFF;;AAKAhB,IAAAA,OAAO,CAACC,GAAR,CAAa,gDAA+CjB,iBAAiB,CAACS,cAAe,EAAjF,CAAmF4B,IAA/F;AAEA,WAAO,IAAP;AACD;;AAxFsD","sourcesContent":["import { Content, OptionList, Section } from 'command-line-usage';\nimport fs from 'fs';\nimport { EOL } from 'os';\nimport yaml from 'js-yaml';\nimport Operation from './operation';\n\nexport default class LINEInitOperation extends Operation {\n  static get usage() {\n    /** @type {Content|OptionList|Section[]} */\n    const sections = [\n      {\n        header: 'Initialize configuration file for LINE API CLIs'.help,\n        content:\n          'Initialize configuration file' +\n          EOL +\n          EOL +\n          'line init'.code +\n          EOL +\n          EOL +\n          `This command should be run first time under project root folder. After run successfully, you will get ${this.configFileName} configuration file`\n      }\n    ];\n\n    return sections;\n  }\n\n  static async run() {\n    const prompts = require('prompts');\n    const exists = fs.existsSync(`./${LINEInitOperation.configFileName}`);\n\n    if (exists === true) {\n      console.log(`${LINEInitOperation.configFileName} already exists`.warn);\n\n      const { overwrite } = await prompts({\n        type: 'toggle',\n        name: 'overwrite',\n        message: 'Do you want to overwrite?',\n        initial: false,\n        active: 'Yes',\n        inactive: 'No'\n      });\n\n      if (!overwrite) {\n        return false;\n      }\n    }\n\n    console.log('Setting up configuration file'.help);\n\n    const { id } = await prompts({\n      type: 'number',\n      name: 'id',\n      message: 'Channel ID?',\n      hint:\n        'You can find Channel ID and Secret at https://manager.line.biz/account/<Account ID>/setting/messaging-api'\n    });\n    const { secret } = await prompts({\n      type: 'text',\n      name: 'secret',\n      message: 'Channel Secret?'\n    });\n\n    const { hasLongLivedAccessToken } = await prompts({\n      type: 'toggle',\n      name: 'hasLongLivedAccessToken',\n      message: 'Do you have long-lived access token?',\n      initial: false,\n      active: 'Yes',\n      inactive: 'No'\n    });\n\n    let accessToken = '';\n\n    if (hasLongLivedAccessToken) {\n      const rsToken = await prompts({\n        type: 'text',\n        name: 'accessToken',\n        message: 'Long-lived access token?'\n      });\n      accessToken = rsToken.accessToken;\n    }\n\n    const config = {\n      channel: { id, secret, accessToken }\n    };\n\n    fs.writeFileSync(\n      `./${LINEInitOperation.configFileName}`,\n      yaml.safeDump(config)\n    );\n\n    console.log(`Successfully written configuration file at ./${LINEInitOperation.configFileName}`.info);\n\n    return true;\n  }\n}\n"],"file":"line-init-operation.js"}