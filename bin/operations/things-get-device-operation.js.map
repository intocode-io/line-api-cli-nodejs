{"version":3,"sources":["../../lib/operations/things-get-device-operation.js"],"names":["ThingsGetDeviceOperation","ThingsOperation","usage","sections","header","help","content","code","run","validateConfig","prompts","require","deviceId","type","name","message","cancelOption","console","log","error","userId","response","getWithUserRequest","send","getRequest","data","logAxiosError","ThingsGetDeviceRequest","accessToken","config","channel","ThingsGetDeviceByDeviceUserRequest"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;AAEe,MAAMA,wBAAN,SAAuCC,wBAAvC,CAAuD;AAQpE,aAAWC,KAAX,GAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,0DAA0DC,IADpE;AAEEC,MAAAA,OAAO,EAAG,mBAAD,CAAoBC;AAF/B,KADe,CAAjB;AAOA,WAAOJ,QAAP;AACD;;AAED,eAAaK,GAAb,GAAmB;AACjB,QAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AACD,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAe,OAAMF,OAAO,CAChC;AACEG,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KADgC,EAMhC,KAAKC,YAN2B,CAAb,KAOhB,EAPL;;AASA,QAAI,CAACJ,QAAL,EAAe;AACbK,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BC,KAAxC;AACA,aAAO,KAAP;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAa,OAAMV,OAAO,CAC9B;AACEG,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KAD8B,EAM9B,KAAKC,YANyB,CAAb,KAOd,EAPL;;AASA,QAAI;AACF,YAAMK,QAAQ,GAAID,MAAD,GAAW,MAAM,KAAKE,kBAAL,CAAwBC,IAAxB,CAA6BX,QAA7B,EAAuCQ,MAAvC,CAAjB,GAAkE,MAAM,KAAKI,UAAL,CAAgBD,IAAhB,CAAqBX,QAArB,CAAzF;AAEAK,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACI,IAArB;AACD,KAJD,CAIE,OAAON,KAAP,EAAc;AACd,WAAKO,aAAL,CAAmBP,KAAnB;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AA3DmE;;;;gBAAjDnB,wB,gBACC,IAAI2B,+BAAJ,CAA2B;AAC7CC,EAAAA,WAAW,EAFM5B,wBAEJ,CAAK6B,MAAL,CAAYC,OAAZ,CAAoBF;AADY,CAA3B,C;;gBADD5B,wB,wBAIS,IAAI+B,2CAAJ,CAAuC;AACjEH,EAAAA,WAAW,EALM5B,wBAKJ,CAAK6B,MAAL,CAAYC,OAAZ,CAAoBF;AADgC,CAAvC,C","sourcesContent":["import 'console.table';\nimport { Section } from 'command-line-usage';\n\nimport ThingsOperation from './things-operation';\n\nimport ThingsGetDeviceRequest from '../apis/things-get-device-request';\nimport ThingsGetDeviceByDeviceUserRequest from '../apis/things-get-device-by-device-user-request';\n\nexport default class ThingsGetDeviceOperation extends ThingsOperation {\n  static getRequest = new ThingsGetDeviceRequest({\n    accessToken: this.config.channel.accessToken\n  });\n  static getWithUserRequest = new ThingsGetDeviceByDeviceUserRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Get device information by device ID and/or with user ID'.help,\n        content: `things get:device`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n    const prompts = require('prompts');\n\n    const { deviceId } = await prompts(\n      {\n        type: 'text',\n        name: 'deviceId',\n        message: 'Device ID?'\n      },\n      this.cancelOption\n    ) || {};\n\n    if (!deviceId) {\n      console.log('Device ID cannot be empty'.error);\n      return false;\n    }\n\n    const { userId } = await prompts(\n      {\n        type: 'text',\n        name: 'userId',\n        message: 'Specific user ID? [Optional]'\n      },\n      this.cancelOption\n    ) || {};\n\n    try {\n      const response = (userId) ? await this.getWithUserRequest.send(deviceId, userId) : await this.getRequest.send(deviceId);\n\n      console.log(response.data);\n    } catch (error) {\n      this.logAxiosError(error);\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"file":"things-get-device-operation.js"}