{"version":3,"sources":["../../lib/operations/linetv-get-sportlight-operation.js"],"names":["LINETvGetSpotlightOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","validateCountryCode","countryCode","length","run","options","validateConfig","prompts","require","channelId","config","channel","id","type","message","prompt","validate","cancelOption","modules","listResponse","listRequest","send","data","body","supportModule","map","menu","title","dataModel","value","error","console","log","info","choices","getResponse","getRequest","format","JSON","stringify","rows","clips","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","channels","channelName","serviceUrl","playlists","subtitle","table","warn","LINETvListModulesRequest","accessToken","LINETvGetSpotlightRequest"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport { EOL } from 'os';\nimport Operation from './operation';\nimport LINETvListModulesRequest from '../apis/linetv-list-modules-request';\nimport LINETvGetSpotlightRequest from '../apis/linetv-get-sportlight-request';\n\nexport default class LINETvGetSpotlightOperation extends Operation {\n  static listRequest = new LINETvListModulesRequest({\n    accessToken: this.config.channel.accessToken\n  });\n  static getRequest = new LINETvGetSpotlightRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets spotlight data'.help,\n        content:\n          `To display spotlight data in table` +\n          EOL +\n          EOL +\n          `linetv get:spotlight`.code +\n          EOL +\n          EOL +\n          `To get spotlight data in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv get:sportlight --format json`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To display data in JSON format'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n\n    const { countryCode } =\n      (await prompts(\n        {\n          type: 'text',\n          name: 'countryCode',\n          message: `Country Code ${'ISO 3166-2'.prompt}`,\n          validate: this.validateCountryCode\n        },\n        this.cancelOption\n      )) || {};\n\n    let modules = [];\n\n    try {\n      const listResponse = await this.listRequest.send(channelId, countryCode);\n\n      modules = listResponse.data.body.supportModule\n        ? listResponse.data.body.supportModule.map(menu => {\n            return {\n              title: menu.name,\n              description: menu.dataModel,\n              value: menu\n            };\n          })\n        : [];\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n\n    if (!modules.length) {\n      console.log('Modules not found'.info);\n      return true;\n    }\n\n    const { menu } = await prompts(\n      {\n        type: 'select',\n        name: 'menu',\n        message: 'Select a module',\n        choices: modules\n      },\n      this.cancelOption\n    );\n    const getResponse = await this.getRequest.send(\n      channelId,\n      countryCode,\n      menu.name\n    );\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(getResponse.data, null, 2));\n      return true;\n    }\n\n    let rows;\n\n    if (!getResponse.data.body) {\n      rows = [];\n    } else {\n      switch (menu.dataModel) {\n        case 'clip':\n          rows = getResponse.data.body.clips\n            ? getResponse.data.body.clips.map(item => {\n                const columnHeader = {};\n                columnHeader['Clip Number'.success] = item.clipNo;\n                columnHeader['Title'.success] = item.clipTitle;\n                columnHeader['Play Count'.success] = item.playCount;\n                columnHeader['Like Point'.success] = item.likeitPoint;\n                return columnHeader;\n              })\n            : [];\n          break;\n\n        case 'channel':\n          rows = getResponse.data.body.channels\n            ? getResponse.data.body.channels.map(item => {\n                const columnHeader = {};\n                columnHeader['Channel ID'.success] = item.channelId;\n                columnHeader['Channel Name'.success] = item.channelName;\n                columnHeader['URL'.success] = item.serviceUrl;\n                return columnHeader;\n              })\n            : [];\n          break;\n\n        case 'playlist':\n          rows = getResponse.data.body.playlists\n            ? getResponse.data.body.playlists.map(item => {\n                const columnHeader = {};\n                columnHeader['Title'.success] = item.title;\n                columnHeader['Subtitle'.success] = item.subtitle;\n                columnHeader['Play List Count'.success] = item.playlists.length;\n                return columnHeader;\n              })\n            : [];\n          break;\n\n        default:\n          console.error('Data model not implemented');\n          return false;\n      }\n    }\n    if (rows.length > 0) {\n      console.table(rows);\n    } else {\n      console.log('Data not found'.warn);\n    }\n    return true;\n  }\n}\n"],"file":"linetv-get-sportlight-operation.js"}