{"version":3,"sources":["../../lib/operations/linetv-list-station-operation.js"],"names":["LINETvListStationOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","validateCountryCode","countryCode","length","run","options","validateConfig","prompts","require","channelId","config","channel","id","type","message","prompt","validate","cancelOption","response","request","send","data","body","console","log","warn","format","JSON","stringify","stations","map","item","columnHeader","success","stationId","stationName","serviceUrl","table","error","logAxiosError","LINETvListStationRequest","accessToken"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport { EOL } from 'os';\nimport Operation from './operation';\nimport LINETvListStationRequest from '../apis/linetv-list-station-request';\n\nexport default class LINETvListStationOperation extends Operation {\n  static request = new LINETvListStationRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets the station home (TV station) list'.help,\n        content:\n          `To display station home in table` +\n          EOL +\n          EOL +\n          `linetv list:station`.code +\n          EOL +\n          EOL +\n          `To get station home data in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv list:station --format json`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To get data in JSON format'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n\n    const { countryCode } =\n      (await prompts(\n        {\n          type: 'text',\n          name: 'countryCode',\n          message: `Country Code ${'ISO 3166-2'.prompt}`,\n          validate: this.validateCountryCode\n        },\n        this.cancelOption\n      ));\n\n    try {\n      /** @type {import('axios').AxiosResponse<LINETvListStationResponseData>} */\n      const response = await this.request.send(channelId, countryCode);\n\n      if (!response.data || response.data.body === null) {\n        console.log('No station home data'.warn);\n        return true;\n      }\n\n      if (options.format === 'json') {\n        console.log(JSON.stringify(response.data, null, 2));\n        return true;\n      }\n\n      const stations = response.data.body.stations.map(item => {\n        const columnHeader = {};\n        columnHeader['Station ID'.success] = item.stationId;\n        columnHeader['Station Name'.success] = item.stationName;\n        columnHeader['Station URL'.success] = item.serviceUrl;\n        return columnHeader;\n      });\n      console.table(stations);\n    } catch (error) {\n      this.logAxiosError(error);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"linetv-list-station-operation.js"}