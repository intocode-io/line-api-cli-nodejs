{"version":3,"sources":["../../lib/operations/linetv-list-modules-operation.js"],"names":["LINETvListModulesOperation","Operation","usage","sections","header","help","content","code","run","validateConfig","prompts","require","channelId","config","channel","id","countryCode","type","name","message","cancelOption","response","request","send","data","console","log","info","curationModules","body","supportModule","map","item","columnHeader","success","dataModel","table","error","logAxiosError","LINETvListModulesRequest","accessToken"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEe,MAAMA,0BAAN,SAAyCC,kBAAzC,CAAmD;AAKhE,aAAWC,KAAX,GAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,6BAA6BC,IADvC;AAEEC,MAAAA,OAAO,EAAG,qBAAD,CAAsBC;AAFjC,KADe,CAAjB;AAOA,WAAOJ,QAAP;AACD;;AAED,eAAaK,GAAb,GAAmB;AACjB,QAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,UAAMC,SAAS,GAAG,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,EAAtC;AAEA,UAAM;AAAEC,MAAAA;AAAF,QACJ,CAAC,MAAMN,OAAO,CACZ;AACEO,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KADY,EAMZ,KAAKC,YANO,CAAd,KAOM,EARR;;AAUA,QAAI;AACF;AACA,YAAMC,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAaC,IAAb,CAAkBX,SAAlB,EAA6BI,WAA7B,CAAvB;;AAEA,UAAI,CAACK,QAAQ,CAACG,IAAd,EAAoB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BC,IAAxC;AACA,eAAO,IAAP;AACD;;AACD,YAAMC,eAAe,GAAGP,QAAQ,CAACG,IAAT,CAAcK,IAAd,CAAmBC,aAAnB,CAAiCC,GAAjC,CAAqCC,IAAI,IAAI;AACnE,cAAMC,YAAY,GAAG,EAArB;AACAA,QAAAA,YAAY,CAAC,OAAOC,OAAR,CAAZ,GAA+BF,IAAI,CAACd,IAApC;AACAe,QAAAA,YAAY,CAAC,aAAaC,OAAd,CAAZ,GAAqCF,IAAI,CAACG,SAA1C;AACA,eAAOF,YAAP;AACD,OALuB,CAAxB;AAMAR,MAAAA,OAAO,CAACW,KAAR,CAAcR,eAAd;AACD,KAfD,CAeE,OAAOS,KAAP,EAAc;AACd,WAAKC,aAAL,CAAmBD,KAAnB;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAvD+D;;;;gBAA7CrC,0B,aACF,IAAIuC,iCAAJ,CAA6B;AAC5CC,EAAAA,WAAW,EAFMxC,0BAEJ,CAAKa,MAAL,CAAYC,OAAZ,CAAoB0B;AADW,CAA7B,C","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport Operation from './operation';\nimport LINETvListModulesRequest from '../apis/linetv-list-modules-request';\n\nexport default class LINETvListModulesOperation extends Operation {\n  static request = new LINETvListModulesRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'List curation module types'.help,\n        content: `linetv list:modules`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n\n    const { countryCode } =\n      (await prompts(\n        {\n          type: 'text',\n          name: 'countryCode',\n          message: 'Country Code?'\n        },\n        this.cancelOption\n      )) || {};\n\n    try {\n      /** @type {import('axios').AxiosResponse<LINETvListModulesResponseData>} */\n      const response = await this.request.send(channelId, countryCode);\n\n      if (!response.data) {\n        console.log('Curation module not found'.info);\n        return true;\n      }\n      const curationModules = response.data.body.supportModule.map(item => {\n        const columnHeader = {};\n        columnHeader['Name'.success] = item.name;\n        columnHeader['Data Model'.success] = item.dataModel;\n        return columnHeader;\n      });\n      console.table(curationModules);\n    } catch (error) {\n      this.logAxiosError(error);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"linetv-list-modules-operation.js"}