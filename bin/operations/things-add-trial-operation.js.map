{"version":3,"sources":["../../lib/operations/things-add-trial-operation.js"],"names":["ThingsAddTrialOperation","ThingsOperation","usage","sections","header","help","content","code","run","validateConfig","apps","response","listRequest","send","data","error","console","length","log","info","choices","map","app","title","view","type","url","liffId","description","value","prompts","require","name","message","cancelOption","productName","addRequest","table","productsToTableData","LIFFListRequest","accessToken","config","channel","ThingsAddTrialRequest"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;AAEe,MAAMA,uBAAN,SAAsCC,wBAAtC,CAAsD;AAQnE,aAAWC,KAAX,GAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,CACf;AACEC,MAAAA,MAAM,EAAE,sBAAsBC,IADhC;AAEEC,MAAAA,OAAO,EAAG,kBAAD,CAAmBC;AAF9B,KADe,CAAjB;AAOA,WAAOJ,QAAP;AACD;;AAED,eAAaK,GAAb,GAAmB;AACjB,QAAI,CAAC,KAAKC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM,KAAKC,WAAL,CAAiBC,IAAjB,EAAvB;AAEAH,MAAAA,IAAI,GAAGC,QAAQ,CAACG,IAAT,CAAcJ,IAAd,IAAsB,EAA7B;AACD,KAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAO,KAAP;AACD;;AAED,QAAI,CAACL,IAAI,CAACO,MAAV,EAAkB;AAChBD,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAqBC,IAAjC;AACA,aAAO,IAAP;AACD;;AAED,UAAMC,OAAO,GAAGV,IAAI,CAACW,GAAL,CAASC,GAAG,IAAI;AAC9B,aAAO;AACLC,QAAAA,KAAK,EAAG,GAAED,GAAG,CAACE,IAAJ,CAASC,IAAK,IAAGH,GAAG,CAACE,IAAJ,CAASE,GAAI,KAAIJ,GAAG,CAACK,MAAO,GADlD;AAELC,QAAAA,WAAW,EAAEN,GAAG,CAACM,WAFZ;AAGLC,QAAAA,KAAK,EAAEP,GAAG,CAACK;AAHN,OAAP;AAKD,KANe,CAAhB;;AAQA,UAAMG,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,UAAM;AAAEJ,MAAAA;AAAF,QAAa,MAAMG,OAAO,CAC9B;AACEL,MAAAA,IAAI,EAAE,QADR;AAEEO,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,OAAO,EAAE,0CAHX;AAIEb,MAAAA;AAJF,KAD8B,EAO9B,KAAKc,YAPyB,CAAhC;AAUA,UAAM;AAAEC,MAAAA;AAAF,QAAkB,MAAML,OAAO,CACnC;AACEL,MAAAA,IAAI,EAAE,MADR;AAEEO,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,OAAO,EAAE;AAHX,KADmC,EAMnC,KAAKC,YAN8B,CAArC;;AASA,QAAI,CAACC,WAAL,EAAkB;AAChBnB,MAAAA,OAAO,CAACE,GAAR,CAAY,+BAA+BH,KAA3C;AACA,aAAO,KAAP;AACD;;AAED,QAAI;AACF,YAAMJ,QAAQ,GAAG,MAAM,KAAKyB,UAAL,CAAgBvB,IAAhB,CAAqBc,MAArB,EAA6BQ,WAA7B,CAAvB;AACAnB,MAAAA,OAAO,CAACqB,KAAR,CAAcpC,yBAAgBqC,mBAAhB,CAAoC,CAAC3B,QAAQ,CAACG,IAAV,CAApC,CAAd;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AApFkE;;;;gBAAhDf,uB,iBACE,IAAIuC,wBAAJ,CAAoB;AACvCC,EAAAA,WAAW,EAFMxC,uBAEJ,CAAKyC,MAAL,CAAYC,OAAZ,CAAoBF;AADM,CAApB,C;;gBADFxC,uB,gBAIC,IAAI2C,8BAAJ,CAA0B;AAC5CH,EAAAA,WAAW,EALMxC,uBAKJ,CAAKyC,MAAL,CAAYC,OAAZ,CAAoBF;AADW,CAA1B,C","sourcesContent":["import 'console.table';\nimport { Section } from 'command-line-usage';\n\nimport ThingsOperation from './things-operation';\n\nimport LIFFListRequest from '../apis/liff-list-request';\nimport ThingsAddTrialRequest from '../apis/things-add-trial-request';\n\nexport default class ThingsAddTrialOperation extends ThingsOperation {\n  static listRequest = new LIFFListRequest({\n    accessToken: this.config.channel.accessToken\n  });\n  static addRequest = new ThingsAddTrialRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Add a trial product'.help,\n        content: `things add:trial`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    let apps = [];\n\n    try {\n      const response = await this.listRequest.send();\n\n      apps = response.data.apps || [];\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n\n    if (!apps.length) {\n      console.log('LIFF app not found'.info);\n      return true;\n    }\n\n    const choices = apps.map(app => {\n      return {\n        title: `${app.view.type} ${app.view.url} [${app.liffId}]`,\n        description: app.description,\n        value: app.liffId\n      };\n    });\n\n    const prompts = require('prompts');\n\n    const { liffId } = await prompts(\n      {\n        type: 'select',\n        name: 'liffId',\n        message: 'Select a LIFF app to add a trial product',\n        choices\n      },\n      this.cancelOption\n    );\n\n    const { productName } = await prompts(\n      {\n        type: 'text',\n        name: 'productName',\n        message: 'Product name?'\n      },\n      this.cancelOption\n    );\n\n    if (!productName) {\n      console.log('Product name cannot be empty'.error);\n      return false;\n    }\n\n    try {\n      const response = await this.addRequest.send(liffId, productName);\n      console.table(ThingsOperation.productsToTableData([response.data]));\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"file":"things-add-trial-operation.js"}