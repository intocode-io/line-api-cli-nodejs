{"version":3,"sources":["../../lib/operations/linetv-get-station-operation.js"],"names":["LINETvGetStationOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","validateCountryCode","countryCode","length","run","options","validateConfig","prompts","require","channelId","config","channel","id","type","message","prompt","validate","cancelOption","stations","listResponse","listRequest","send","console","log","data","body","warn","map","menu","title","stationId","stationName","value","error","logAxiosError","page","selectedStation","choices","getResponse","getRequest","format","JSON","stringify","popularClip","hasMore","table","clips","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","serviceUrl","popularChannel","channels","channelName","badgeType","nextPage","initial","active","inactive","info","LINETvListStationRequest","accessToken","LINETvGetStationRequest"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport Operation from './operation';\nimport { EOL } from 'os';\nimport LINETvListStationRequest from '../apis/linetv-list-station-request';\nimport LINETvGetStationRequest from '../apis/linetv-get-station-request';\n\nexport default class LINETvGetStationOperation extends Operation {\n  static listRequest = new LINETvListStationRequest({\n    accessToken: this.config.channel.accessToken\n  });\n  static getRequest = new LINETvGetStationRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets the Station Home (TV Station) data'.help,\n        content:\n          `To display station dat in table` +\n          EOL +\n          EOL +\n          `linetv get:station`.code +\n          EOL +\n          EOL +\n          `To get station data in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv get:station --format json`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To display data in JSON format'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n\n    const { countryCode } =\n      (await prompts(\n        {\n          type: 'text',\n          name: 'countryCode',\n          message: `Country Code ${'ISO 3166-2'.prompt}`,\n          validate: this.validateCountryCode\n        },\n        this.cancelOption\n      ));\n\n    let stations = [];\n\n    try {\n      /** @type {import('axios').AxiosResponse<LINETvListStationResponseData>} */\n      const listResponse = await this.listRequest.send(channelId, countryCode);\n      console.log(listResponse.data);\n\n      if (!listResponse.data || listResponse.data.body === null) {\n        console.log('Station data not found'.warn);\n        return true;\n      }\n\n      stations = listResponse.data.body.stations.map(menu => {\n        return {\n          title: menu.stationId,\n          description: menu.stationName,\n          value: menu\n        };\n      });\n    } catch (error) {\n      this.logAxiosError(error);\n      return false;\n    }\n\n    if (!stations.length) {\n      console.log('No Stations Home Data'.warn);\n      return true;\n    }\n\n    let page = 1;\n    const { selectedStation } = await prompts(\n      {\n        type: 'select',\n        name: 'selectedStation',\n        message: 'Select a category',\n        choices: stations\n      },\n      this.cancelOption\n    );\n  \n    /** @type {import('axios').AxiosResponse<LINETvGetStationResponseData>} */\n    let getResponse = await this.getRequest.send(\n      channelId,\n      countryCode,\n      selectedStation.stationId,\n      page\n    );\n\n    if (options.format === 'json') {\n      console.log(JSON.stringify(getResponse.data, null, 2));\n      return true;\n    }\n\n    console.log(getResponse.data.body.popularClip.hasMore);\n    console.table(\n      getResponse.data.body.popularClip.clips.map(item => {\n        const columnHeader = {};\n        columnHeader['Clip Number'.success] = item.clipNo;\n        columnHeader['Title'.success] = item.clipTitle;\n        columnHeader['Play Count'.success] = item.playCount;\n        columnHeader['Like Point'.success] = item.likeitPoint;\n        columnHeader['URL'.success] = item.serviceUrl;\n        return columnHeader;\n      })\n    );\n    console.table(\n      getResponse.data.body.popularChannel.channels.map(item => {\n        const columnHeader = {};\n        columnHeader['Channel ID'.success] = item.channelId;\n        columnHeader['Channel Name'.success] = item.channelName;\n        columnHeader['Badge'.success] = item.badgeType;\n        columnHeader['URL'.success] = item.serviceUrl;\n        return columnHeader;\n      })\n    );\n\n    while (getResponse.data.body.popularClip.hasMore) {\n      const { nextPage } = await prompts(\n        {\n          type: 'toggle',\n          name: 'nextPage',\n          message: 'Next Page ?',\n          initial: true,\n          active: 'yes',\n          inactive: 'no'\n        },\n        this.cancelOption\n      );\n      if (nextPage) {\n        page = page + 1;\n        try {\n          getResponse = await this.getRequest.send(\n            channelId,\n            countryCode,\n            selectedStation.stationId,\n            page\n          );\n        } catch (error) {\n          this.logAxiosError(error);\n          return false;\n        }\n        console.table(\n          getResponse.data.body.popularClip.clips.map(item => {\n            const columnHeader = {};\n            columnHeader['Popular Clip Number'.success] = item.clipNo;\n            columnHeader['Title'.success] = item.clipTitle;\n            columnHeader['Play Count'.success] = item.playCount;\n            columnHeader['Like Point'.success] = item.likeitPoint;\n            columnHeader['URL'.success] = item.serviceUrl;\n            return columnHeader;\n          })\n        );\n        console.table(\n          getResponse.data.body.popularChannel.channels.map(item => {\n            const columnHeader = {};\n            columnHeader['Popular Channel ID'.success] = item.channelId;\n            columnHeader['Channel Name'.success] = item.channelName;\n            columnHeader['Badge'.success] = item.badgeType;\n            columnHeader['URL'.success] = item.serviceUrl;\n            return columnHeader;\n          })\n        );\n      } else {\n        return true;\n      }\n    }\n    console.log('No more page'.info);\n    return true;\n  }\n}\n"],"file":"linetv-get-station-operation.js"}