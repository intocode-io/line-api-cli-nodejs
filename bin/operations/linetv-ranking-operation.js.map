{"version":3,"sources":["../../lib/operations/linetv-ranking-operation.js"],"names":["LINETvRankingOperation","Operation","usage","sections","header","help","content","code","validateNonZero","countPerPage","validateCountryCode","countryCode","length","run","validateConfig","prompts","require","channelId","config","channel","id","page","type","name","message","prompt","validate","cancelOption","initial","response","request","send","data","body","console","log","warn","rankingClips","clips","map","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","table","hasMore","nextPage","active","inactive","error","logAxiosError","info","LINETvRankingRequest","accessToken"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport Operation from './operation';\nimport LINETvRankingRequest from '../apis/linetv-ranking-request';\n\nexport default class LINETvRankingOperation extends Operation {\n  static request = new LINETvRankingRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets clip ranking data.'.help,\n        content: `linetv ranking`.code\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateNonZero(countPerPage) {\n    return countPerPage === 0 ? 'Zero is not allowed' : true;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run() {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n    let page = 1;\n\n    const { countryCode } = await prompts(\n      {\n        type: 'text',\n        name: 'countryCode',\n        message: `Country Code ${'ISO 3166-2'.prompt}`,\n        validate: this.validateCountryCode\n      },\n      this.cancelOption\n    );\n    const { countPerPage } = await prompts(\n      {\n        type: 'number',\n        name: 'countPerPage',\n        message: 'Number of display per page?',\n        initial: 10,\n        validate: this.validateNonZero\n      },\n      this.cancelOption\n    );\n\n      /** @type {import('axios').AxiosResponse<LINETvRankingResponseData>} */\n      let response = await this.request.send(\n        channelId,\n        countryCode,\n        page,\n        countPerPage\n      );\n      if (!response.data || response.data.body === null) {\n        console.log('Ranking clips not found'.warn);\n        return true;\n      }\n\n      const rankingClips = response.data.body.clips.map(item => {\n        const columnHeader = {};\n        columnHeader['Clip Number'.success] = item.clipNo;\n        columnHeader['Title'.success] = item.clipTitle;\n        columnHeader['Play Count'.success] = item.playCount;\n        columnHeader['Like Point'.success] = item.likeitPoint;\n        return columnHeader;\n      });\n\n      console.table(rankingClips);\n\n      while (response.data.body.hasMore) {\n        const { nextPage } = await prompts(\n          {\n            type: 'toggle',\n            name: 'nextPage',\n            message: 'Next Page ?',\n            initial: true,\n            active: 'yes',\n            inactive: 'no'\n          },\n          this.cancelOption\n        );\n        if (nextPage) {\n          page = page + 1;\n          try {\n            response = await this.request.send(\n              channelId,\n              countryCode,\n              page,\n              countPerPage\n            );\n          } catch (error) {\n            this.logAxiosError(error);\n            return false;\n          }\n          console.table(\n            response.data.body.clips.map(item => {\n              const columnHeader = {};\n              columnHeader['Clip Number'.success] = item.clipNo;\n              columnHeader['Title'.success] = item.clipTitle;\n              columnHeader['Play Count'.success] = item.playCount;\n              columnHeader['Like Point'.success] = item.likeitPoint;\n              return columnHeader;\n            })\n          );\n        } else {\n          return true;\n        }\n      }\n      console.log('No more page'.info);\n      return true;\n      \n  }\n}\n"],"file":"linetv-ranking-operation.js"}