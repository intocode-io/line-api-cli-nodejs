{"version":3,"sources":["../../lib/operations/linetv-ranking-operation.js"],"names":["LINETvRankingOperation","Operation","usage","sections","header","help","content","EOL","code","optionList","name","description","typeLabel","validateNonZero","countPerPage","validateCountryCode","countryCode","length","run","options","validateConfig","prompts","require","channelId","config","channel","id","page","type","message","prompt","validate","cancelOption","initial","response","request","send","data","body","console","log","warn","format","JSON","stringify","rankingClips","clips","map","item","columnHeader","success","clipNo","clipTitle","playCount","likeitPoint","table","hasMore","nextPage","active","inactive","error","logAxiosError","info","LINETvRankingRequest","accessToken"],"mappings":"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","sourcesContent":["import '../typedef';\nimport 'console.table';\nimport { Section } from 'command-line-usage';\nimport { EOL } from 'os';\nimport Operation from './operation';\nimport LINETvRankingRequest from '../apis/linetv-ranking-request';\n\nexport default class LINETvRankingOperation extends Operation {\n  static request = new LINETvRankingRequest({\n    accessToken: this.config.channel.accessToken\n  });\n\n  static get usage() {\n    /** @type {Section[]} */\n    const sections = [\n      {\n        header: 'Gets clip ranking data.'.help,\n        content:\n          `To display clip ranking data in table` +\n          EOL +\n          EOL +\n          `linetv ranking`.code +\n          EOL +\n          EOL +\n          `To get clip ranking data in JSON format, you can run with --format option.` +\n          EOL +\n          EOL +\n          `linetv ranking --format json`.code +\n          EOL +\n          EOL +\n          `To get clip ranking data start from selected page, you can run with --page option.` +\n          EOL +\n          EOL +\n          `linetv ranking --page <number>`.code\n      },\n      {\n        header: 'Options',\n        optionList: [\n          {\n            name: 'format'.code,\n            description: 'To display data in JSON format'\n          },\n          {\n            name: 'page'.code,\n            typeLabel: '{underline number}',\n            description: 'To display data starts from selected page'\n          }\n        ]\n      }\n    ];\n\n    return sections;\n  }\n\n  static validateNonZero(countPerPage) {\n    return countPerPage === 0 ? 'Zero is not allowed' : true;\n  }\n\n  static validateCountryCode(countryCode) {\n    return countryCode.length !== 2\n      ? 'Please input ISO 3166-2 (2 characters)'\n      : true;\n  }\n\n  static async run(options) {\n    if (!this.validateConfig()) {\n      return false;\n    }\n\n    const prompts = require('prompts');\n    const channelId = this.config.channel.id;\n    let page = options.page || 1;\n\n    const { countryCode } = await prompts(\n      {\n        type: 'text',\n        name: 'countryCode',\n        message: `Country Code ${'ISO 3166-2'.prompt}`,\n        validate: this.validateCountryCode\n      },\n      this.cancelOption\n    );\n    const { countPerPage } = await prompts(\n      {\n        type: 'number',\n        name: 'countPerPage',\n        message: 'Number of display per page?',\n        initial: 10,\n        validate: this.validateNonZero\n      },\n      this.cancelOption\n    );\n\n      /** @type {import('axios').AxiosResponse<LINETvRankingResponseData>} */\n      let response = await this.request.send(\n        channelId,\n        countryCode,\n        page,\n        countPerPage\n      );\n      if (!response.data || response.data.body === null) {\n        console.log('Ranking clips not found'.warn);\n        return true;\n      }\n\n      if (options.format === 'json') {\n        console.log(JSON.stringify(response.data, null, 2));\n        return true;\n      }\n\n      const rankingClips = response.data.body.clips.map(item => {\n        const columnHeader = {};\n        columnHeader['Clip Number'.success] = item.clipNo;\n        columnHeader['Title'.success] = item.clipTitle;\n        columnHeader['Play Count'.success] = item.playCount;\n        columnHeader['Like Point'.success] = item.likeitPoint;\n        return columnHeader;\n      });\n\n      console.table(rankingClips);\n\n      while (response.data.body.hasMore) {\n        const { nextPage } = await prompts(\n          {\n            type: 'toggle',\n            name: 'nextPage',\n            message: `Current page: ${page}. Go to next page ?`,\n            initial: true,\n            active: 'yes',\n            inactive: 'no'\n          },\n          this.cancelOption\n        );\n        if (nextPage) {\n          page = page + 1;\n          try {\n            response = await this.request.send(\n              channelId,\n              countryCode,\n              page,\n              countPerPage\n            );\n          } catch (error) {\n            this.logAxiosError(error);\n            return false;\n          }\n          console.table(\n            response.data.body.clips.map(item => {\n              const columnHeader = {};\n              columnHeader['Clip Number'.success] = item.clipNo;\n              columnHeader['Title'.success] = item.clipTitle;\n              columnHeader['Play Count'.success] = item.playCount;\n              columnHeader['Like Point'.success] = item.likeitPoint;\n              return columnHeader;\n            })\n          );\n        } else {\n          return true;\n        }\n      }\n      console.log('No more page'.info);\n      return true;\n      \n  }\n}\n"],"file":"linetv-ranking-operation.js"}